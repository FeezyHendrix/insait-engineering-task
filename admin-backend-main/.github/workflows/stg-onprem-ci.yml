name: STG - On-Prem build&push container image

on:
  workflow_dispatch:

jobs:
  onprem-deploy:
    name: Onprem Deploy
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract Tag Name
        id: extract_tag
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "::set-output name=tag_name::$TAG_NAME"

      - name: Build Backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

      - name: Push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
        run: |
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.extract_tag.outputs.tag_name }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.extract_tag.outputs.tag_name }}

    #   - name: Download task definition
    #     env:
    #       TASK_DEFINITION_FAMILY: ${{ secrets.AWS_ECR_REPOSITORY }}
    #     run: |
    #       aws ecs describe-task-definition --task-definition $TASK_DEFINITION_FAMILY --query taskDefinition > task-definition.json

    #   - name: Deploy Amazon ECS task definition
    #     uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #     with:
    #       task-definition: task-definition.json
    #       service: ${{ secrets.AWS_ECS_SERVICE }}
    #       cluster: ${{ secrets.AWS_ECS_CLUSTER }}
    #       wait-for-service-stability: true
